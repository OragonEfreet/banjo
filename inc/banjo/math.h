////////////////////////////////////////////////////////////////////////////////
/// \file math.h
/// \brief Math constants and wrapped standard math functions.
///
/// This header provides commonly used math constants and wraps
/// standard math functions with a BJ_ prefix for consistency.
///
/// \addtogroup math
/// \{
////////////////////////////////////////////////////////////////////////////////

#pragma once

#define _USE_MATH_DEFINES 
#include <math.h>

////////////////////////////////////////////////////////////////////////////////
/// \def BJ_PI
/// \brief The mathematical constant Ï€ (pi).
///
/// Defined to high precision for use in trigonometric calculations.
////////////////////////////////////////////////////////////////////////////////
#define BJ_PI (3.14159265358979323846)

////////////////////////////////////////////////////////////////////////////////
/// \def bj_acosf
/// \brief Wrapper for the standard acosf() function.
///
/// Computes the arc cosine of a floating-point value.
////////////////////////////////////////////////////////////////////////////////
#define bj_acosf acosf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_cosf
/// \brief Wrapper for the standard cosf() function.
///
/// Computes the cosine of a floating-point value.
////////////////////////////////////////////////////////////////////////////////
#define bj_cosf cosf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_expf
/// \brief Wrapper for the standard expf() function.
///
/// Computes the exponential of a floating-point value.
////////////////////////////////////////////////////////////////////////////////
#define bj_expf expf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_fabs
/// \brief Wrapper for the standard fabs() function.
///
/// Computes the absolute value of a double precision floating-point number.
////////////////////////////////////////////////////////////////////////////////
#define bj_fabs fabs

////////////////////////////////////////////////////////////////////////////////
/// \def bj_fabsf
/// \brief Wrapper for the standard fabsf() function.
///
/// Computes the absolute value of a single precision floating-point number.
////////////////////////////////////////////////////////////////////////////////
#define bj_fabsf fabsf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_floor
/// \brief Wrapper for the standard floor() function.
///
/// Computes the largest integer value not greater than the input (double precision).
////////////////////////////////////////////////////////////////////////////////
#define bj_floor floor

////////////////////////////////////////////////////////////////////////////////
/// \def bj_floorf
/// \brief Wrapper for the standard floorf() function.
///
/// Computes the largest integer value not greater than the input (single precision).
////////////////////////////////////////////////////////////////////////////////
#define bj_floorf floorf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_fmaxf
/// \brief Wrapper for the standard fmaxf() function.
///
/// Returns the maximum of two floating-point values.
////////////////////////////////////////////////////////////////////////////////
#define bj_fmaxf fmaxf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_fminf
/// \brief Wrapper for the standard fminf() function.
///
/// Returns the minimum of two floating-point values.
////////////////////////////////////////////////////////////////////////////////
#define bj_fminf fminf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_fmod
/// \brief Wrapper for the standard fmod() function.
///
/// Computes the floating-point remainder of division.
////////////////////////////////////////////////////////////////////////////////
#define bj_fmod fmod

////////////////////////////////////////////////////////////////////////////////
/// \def bj_powf
/// \brief Wrapper for the standard powf() function.
///
/// Computes the power function (base raised to exponent).
////////////////////////////////////////////////////////////////////////////////
#define bj_powf powf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_round
/// \brief Wrapper for the standard round() function.
///
/// Rounds a floating-point value to the nearest integer (double precision).
////////////////////////////////////////////////////////////////////////////////
#define bj_round round

////////////////////////////////////////////////////////////////////////////////
/// \def bj_sin
/// \brief Wrapper for the standard sin() function.
///
/// Computes the sine of a double precision floating-point value.
////////////////////////////////////////////////////////////////////////////////
#define bj_sin sin

////////////////////////////////////////////////////////////////////////////////
/// \def bj_sinf
/// \brief Wrapper for the standard sinf() function.
///
/// Computes the sine of a single precision floating-point value.
////////////////////////////////////////////////////////////////////////////////
#define bj_sinf sinf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_sqrtf
/// \brief Wrapper for the standard sqrtf() function.
///
/// Computes the square root of a single precision floating-point value.
////////////////////////////////////////////////////////////////////////////////
#define bj_sqrtf sqrtf

////////////////////////////////////////////////////////////////////////////////
/// \def bj_tanf
/// \brief Wrapper for the standard tanf() function.
///
/// Computes the tangent of a single precision floating-point value.
////////////////////////////////////////////////////////////////////////////////
#define bj_tanf tanf
/// \}
