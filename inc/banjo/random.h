////////////////////////////////////////////////////////////////////////////////
/// \file random.h
/// \brief Pseudo-random number generation API.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// \defgroup random Random
/// \brief Random number generation utilities.
/// \{
////////////////////////////////////////////////////////////////////////////////

#ifndef BJ_RANDOM_H
#define BJ_RANDOM_H

#include <banjo/api.h>

////////////////////////////////////////////////////////////////////////////////
/// \def BJ_RAND_MAX
/// \brief Maximum value returned by bj_rand().
///
/// Matches the stdlib idea of `RAND_MAX`. Values from bj_rand() are
/// distributed in `[0, BJ_RAND_MAX]`. 
////////////////////////////////////////////////////////////////////////////////
#define BJ_RAND_MAX 0x7FFF

////////////////////////////////////////////////////////////////////////////////
/// \brief Seed the standard PRNG.
///
/// Using the same seed reproduces the same sequence.
////////////////////////////////////////////////////////////////////////////////
void bj_srand(unsigned int seed);

////////////////////////////////////////////////////////////////////////////////
/// \brief Generate a pseudo-random integer.
///
/// Mimics the behavior of the C standard library `rand()`.  
/// Implements a linear congruential generator (LCG) with the recurrence:
/// \f[
///   X_{n+1} = (a \cdot X_n + c) \; \bmod \; m
/// \f]
///
/// - Multiplier `a = 1103515245`  
/// - Increment `c = 12345`  
/// - Modulus `m = 2^{31}`  
///
/// The function returns the high-order bits of the state truncated to
/// fit in the range `[0, BJ_RAND_MAX]`.
///
/// \return A pseudo-random integer between 0 and BJ_RAND_MAX inclusive.
////////////////////////////////////////////////////////////////////////////////
int bj_rand(void);

////////////////////////////////////////////////////////////////////////////////
/// \brief PCG32 generator state.
///
/// Zero-initialization is valid and yields a deterministic stream.
/// The structure is plain-old-data: safe for stack allocation, copying,
/// or static storage. The \p inc field selects an independent sequence;
/// it is recommended to use an odd value, though zero is allowed.
///
/// \note The internal layout is part of the public ABI. Do not change
///       without bumping the major version.
////////////////////////////////////////////////////////////////////////////////
typedef struct {
    uint64_t state; ///< Current internal state (updated each step).
    uint64_t inc;   ///< Stream selector; odd recommended, 0 allowed.
} bj_pcg32_t;

////////////////////////////////////////////////////////////////////////////////
/// \brief Set the generator state from seed and sequence.
/// \param g Generator pointer (must not be NULL).
/// \param seed Initial seed value.
/// \param seq  Stream selector (LSB forced to 1 internally).
////////////////////////////////////////////////////////////////////////////////
void bj_pcg32_seed(
    bj_pcg32_t* generator,
    uint64_t    seed,
    uint64_t    seq
);

////////////////////////////////////////////////////////////////////////////////
/// \brief Advance the generator and return the next 32-bit value.
/// \param g Generator pointer (must not be NULL).
/// \return Next 32-bit pseudo-random value.
////////////////////////////////////////////////////////////////////////////////
uint32_t bj_pcg32(
    bj_pcg32_t* generator
);

////////////////////////////////////////////////////////////////////////////////
/// \brief Advance the generator state by \p z steps.
/// \param g Generator pointer (must not be NULL).
/// \param z Number of steps to skip ahead.
////////////////////////////////////////////////////////////////////////////////
void bj_pcg32_discard(
    bj_pcg32_t* generator,
    uint64_t    z
);

////////////////////////////////////////////////////////////////////////////////
/// \brief Smallest possible value returned by the generator.
/// \return Always 0.
////////////////////////////////////////////////////////////////////////////////
uint32_t bj_pcg32_min(
    void
);

////////////////////////////////////////////////////////////////////////////////
/// \brief Largest possible value returned by the generator.
/// \return Always 0xFFFFFFFF.
////////////////////////////////////////////////////////////////////////////////
uint32_t bj_pcg32_max(
    void
);

#endif
/// \} // end of random group
