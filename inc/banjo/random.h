////////////////////////////////////////////////////////////////////////////////
/// \file random.h
/// \brief Pseudo-random number generation API.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// \defgroup random Random
/// \brief Random number generation utilities.
/// \{
////////////////////////////////////////////////////////////////////////////////

#ifndef BJ_RANDOM_H
#define BJ_RANDOM_H

#include <banjo/api.h>

////////////////////////////////////////////////////////////////////////////////
/// \def BJ_RAND_MAX
/// \brief Maximum value returned by bj_rand().
///
/// Matches the stdlib idea of `RAND_MAX`. Values from bj_rand() are
/// distributed in `[0, BJ_RAND_MAX]`. 
////////////////////////////////////////////////////////////////////////////////
#define BJ_RAND_MAX 0x7FFF

////////////////////////////////////////////////////////////////////////////////
/// \brief Seed the standard PRNG.
///
/// Using the same seed reproduces the same sequence.
////////////////////////////////////////////////////////////////////////////////
void bj_srand(unsigned int seed);

////////////////////////////////////////////////////////////////////////////////
/// \brief Generate a pseudo-random integer.
///
/// Mimics the behavior of the C standard library `rand()`.  
/// Implements a linear congruential generator (LCG) with the recurrence:
/// \f[
///   X_{n+1} = (a \cdot X_n + c) \; \bmod \; m
/// \f]
///
/// - Multiplier `a = 1103515245`  
/// - Increment `c = 12345`  
/// - Modulus `m = 2^{31}`  
///
/// The function returns the high-order bits of the state truncated to
/// fit in the range `[0, BJ_RAND_MAX]`.
///
/// \return A pseudo-random integer between 0 and BJ_RAND_MAX inclusive.
////////////////////////////////////////////////////////////////////////////////
int bj_rand(void);

#endif
/// \} // end of random group
